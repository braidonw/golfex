.wrapper {
    max-width: 1300px;
    margin-inline: auto;
    padding-inline: var(--space-gutter);
}

.repel {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: var(--repel-alignment, center);
    gap: var(--space-gutter, var(--space-s-m));
}

.repel[data-repel-variant="vertical"] {
    --repel-alignment: stretch;
    flex-direction: column;
}

/*
REGION UTILITY
Consistent block padding for page sections
*/
.region {
    padding-block: var(--region-space, var(--space-xl-2xl));
}

/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
    display: grid;
    grid-template-columns: repeat(
        var(--grid-placement, auto-fill),
        minmax(var(--grid-min-item-size, 16rem), 1fr)
    );
    gap: var(--gutter, var(--space-s-l));
}

/* A split 50/50 layout */
.grid[data-layout="halves"] {
    --grid-placement: auto-fit;
    --grid-min-item-size: clamp(16rem, 50vw, 33rem);
}

/* Three column grid layout */
.grid[data-layout="thirds"] {
    --grid-placement: auto-fit;
    --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

/*
FLOW COMPOSITION
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/
*/
.flow > * + * {
    margin-top: var(--flow-space, 1em);
}
